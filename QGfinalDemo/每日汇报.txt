4.12看了两小时最终考核文档陷入迷茫，其实我可以选最难的五子棋，但加分项写不出来。
所以我还是选择了最稳的交易市场，这个我能发挥更好。
然后花了四小时分析业务，建立sql表和构建项目，忽然发现我被要求用上baseServlet，所以又花了四小时学了相关知识
比如反射和注解。
4.13花了一小时，终于能在项目上套上baseServlet了。我想再搓一个ORM框架,但思来想去我退而求其次，
还是搓了一个CRUD通用工具类并引入,毕竟不用通用工具类来写mapper层太繁琐了。
然后花了一个小时引入了junit，后来发现单元测试得在根目录单独开一个文件夹来存放。
然后开始编写实体类，发现我发现有些数据得用double形式，甚至我得处理怎么表示头像和时间的方法的难题。
时间的话我致力于生成时间时 ISO 8601 标准的格式来解决前后端时间兼容的问题
4.14写Mapper层并进行单元测试，对于数据的删除功能我用“字段状态”的概念来代替来模拟数据库朔源以及账号存在状态。
过程中发现了我编写的CRUD工具类有字段名和实体类变量不匹配的问题，所以改进了工具类,添加了将xxx_xx的命名转换为xxxXxx的方法
好吧，经过8个小时的艰苦卓绝地奋斗，我把Mapper模块做完了
4.15今天花了两小时部署了WebSocket依赖,考虑到不能使用名字带spring的任何框架，所以找到合适的资料来学习相当困难
但我还是学习了相关原理，搓出来了一个，这样就可以用来实现私聊功能了，不过这个私聊功能的实现相对难，打算到最后实现。
然后花了两小时做了个单例类和对应的Mapper来对systeminfo即系统变量进行增删改查，
第一次做单例类以及怎么用单例类实现与数据库的交互有挑战性。
然后对该单例类做了一些调整保证使其在使用之前总是已经被数据库初始化了以保证数据安全。
然后开始写必做部分的service层，因为我认为必做功能和选做功能的业务相对独立
4.16花一小时制作了时间处理类，统合了systeminfo和必做部分的service层，上传了数据库，开始制作servlet层
然后引进了常量文件，result结果类，ip获取器和异常处理器;更新了service使每个账号的邮箱，账号名和电话不重复
更新了service使用户购买东西和进行评分和撤销评分都会影响商品和用户的形象
开始写servlet和前台，首先要实现登陆注册模块，打算用postman来进行测试
4.17写了登录注册界面，发现验证码出bug了，真是麻烦。
然后创建了前台的页面文件，然后用session技术获取当前用户信息，然后正在制作个人用户数据更新板块
4.18写完了用户数据更新板块，为了正确科学地更新数据，我引进了正则表达式，然后进行大量逻辑判断，包括但不限于密码校验
，手机号和邮箱唯一性校验和是否改密码校验，以及改了一些bug，花了四小时
我意识到如果要对websocket进行测试，就要用不同的session实例存储账号，然而一个浏览器默认只能生成一个session
时间紧迫，我没有针对这种情况实现根据id获取不同session或者写token验证机制
而是用不同浏览器生成不同session进行测试
写了加载个人商品加载功能，认识到了异步请求加载顺序问题会带来bug的存在
4.19写了个人订单加载
和评论加载
和新增商品
和更新商品
和查询特定订单
和评论的功能，
没什么难度，
就是代码量很大，
判断逻辑相当复杂